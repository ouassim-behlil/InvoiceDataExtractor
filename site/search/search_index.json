{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Invoice Extractor Documentation","text":"<p>Welcome to the Invoice Extractor documentation. This comprehensive guide will help you understand and use the Invoice Extractor system effectively.</p>"},{"location":"#table-of-contents","title":"Table of Contents","text":""},{"location":"#1-getting-started","title":"1. Getting Started","text":"<ul> <li>Quick start guide</li> <li>Installation</li> <li>Basic usage</li> <li>Directory structure</li> </ul>"},{"location":"#2-api-documentation","title":"2. API Documentation","text":"<ul> <li>Processor class reference</li> <li>Methods and parameters</li> <li>Data structures</li> <li>Error handling</li> </ul>"},{"location":"#3-examples","title":"3. Examples","text":"<ul> <li>Basic usage examples</li> <li>Batch processing</li> <li>Error handling</li> <li>Best practices</li> <li>Common patterns</li> </ul>"},{"location":"#4-validation-guide","title":"4. Validation Guide","text":"<ul> <li>Validation rules</li> <li>Data types</li> <li>Mathematical validations</li> <li>Business rules</li> <li>Error messages</li> </ul>"},{"location":"#5-troubleshooting","title":"5. Troubleshooting","text":"<ul> <li>Common issues</li> <li>Solutions</li> <li>Debugging tips</li> <li>When to contact support</li> </ul>"},{"location":"#6-faq","title":"6. FAQ","text":"<ul> <li>General questions</li> <li>Technical questions</li> <li>Performance optimization</li> <li>Integration guidance</li> </ul>"},{"location":"#quick-navigation","title":"Quick Navigation","text":""},{"location":"#for-new-users","title":"For New Users","text":"<ol> <li>Start with the Getting Started guide</li> <li>Review the Examples</li> <li>Check the FAQ for common questions</li> </ol>"},{"location":"#for-developers","title":"For Developers","text":"<ol> <li>Review the API Documentation</li> <li>Understand the Validation Guide</li> <li>Implement error handling using the Troubleshooting guide</li> </ol>"},{"location":"#for-system-integration","title":"For System Integration","text":"<ol> <li>Study the API Documentation</li> <li>Review integration examples in Examples</li> <li>Understand validation requirements in Validation Guide</li> </ol>"},{"location":"#quick-reference","title":"Quick Reference","text":""},{"location":"#basic-usage","title":"Basic Usage","text":"<pre><code>from src._processor import Processor\n\n# Initialize\nwith open('api_key.txt', 'r') as f:\n    api_key = f.read().strip()\nprocessor = Processor(api_key)\n\n# Process invoice\nresult = processor.extract_json_from_image('invoices/invoice.jpg')\n</code></pre>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>OCR-based invoice data extraction</li> <li>Structured JSON output</li> <li>Comprehensive validation</li> <li>Error handling</li> <li>Batch processing support</li> </ul>"},{"location":"#support-channels","title":"Support Channels","text":"<ul> <li>Documentation (you are here)</li> <li>GitHub Issues</li> <li>Community Forums</li> <li>Direct Support</li> </ul>"},{"location":"#contributing","title":"Contributing","text":"<p>We welcome contributions! Please see our Contributing Guide for details.</p>"},{"location":"#license","title":"License","text":"<p>This project is licensed under the MIT License. See the LICENSE file for details.</p>"},{"location":"api/","title":"API Documentation","text":""},{"location":"api/#processor-class","title":"Processor Class","text":"<p>The main class for processing invoice images.</p>"},{"location":"api/#constructor","title":"Constructor","text":"<pre><code>processor = Processor(api_key: str)\n</code></pre> <p>Parameters: - <code>api_key</code> (str): Google Gemini API key</p>"},{"location":"api/#methods","title":"Methods","text":""},{"location":"api/#extract_json_from_image","title":"extract_json_from_image","text":"<pre><code>def extract_json_from_image(image_path: str) -&gt; Optional[Union[dict, str]]\n</code></pre> <p>Processes an invoice image and returns structured data.</p> <p>Parameters: - <code>image_path</code> (str): Path to the invoice image file</p> <p>Returns: - <code>dict</code>: Parsed JSON data if successful - <code>str</code>: Raw JSON string if parsing fails - <code>None</code>: If no JSON block was detected</p> <p>Example: <pre><code>result = processor.extract_json_from_image('invoices/invoice.jpg')\nif isinstance(result, dict):\n    print(f\"Invoice number: {result.get('invoice_number')}\")\n</code></pre></p>"},{"location":"api/#invoice-validation","title":"Invoice Validation","text":""},{"location":"api/#validate_invoice_data","title":"validate_invoice_data","text":"<pre><code>from src.utils.invoice_checker import validate_invoice_data\n\nresult = validate_invoice_data(invoice_data: Dict[str, Any]) -&gt; Dict[str, Any]\n</code></pre> <p>Validates the mathematical consistency and data types of invoice data.</p> <p>Parameters: - <code>invoice_data</code> (dict): Invoice data in JSON format</p> <p>Returns: Dictionary with: - <code>is_valid</code> (bool): Validation result - <code>errors</code> (list): List of error messages - <code>total_errors</code> (int): Number of errors</p> <p>Example: <pre><code>validation = validate_invoice_data(invoice_data)\nif not validation['is_valid']:\n    print(f\"Found {validation['total_errors']} errors:\")\n    for error in validation['errors']:\n        print(f\"- {error}\")\n</code></pre></p>"},{"location":"api/#data-structures","title":"Data Structures","text":""},{"location":"api/#invoice-json-structure","title":"Invoice JSON Structure","text":"<pre><code>{\n  \"invoice_number\": string or null,\n  \"invoice_date\": string (YYYY-MM-DD) or null,\n  \"supplier\": {\n    \"name\": string or null,\n    \"address\": string or null,\n    \"phone\": string or null,\n    \"email\": string or null\n  },\n  \"client\": {\n    \"name\": string or null,\n    \"address\": string or null,\n    \"phone\": string or null,\n    \"email\": string or null\n  },\n  \"items\": [\n    {\n      \"description\": string or null,\n      \"quantity\": number or null,\n      \"unit_price\": number or null,\n      \"total_price\": number or null\n    }\n  ],\n  \"subtotal\": number or null,\n  \"total\": number or null\n  // ... other fields ...\n}\n</code></pre>"},{"location":"api/#error-handling","title":"Error Handling","text":"<p>The validation system returns detailed error messages for: - Missing required fields - Invalid data types - Mathematical inconsistencies - Business rule violations</p> <p>See Error Examples for common scenarios.</p>"},{"location":"examples/","title":"Examples","text":"<p>This document provides practical examples of using the Invoice Extractor.</p>"},{"location":"examples/#basic-usage","title":"Basic Usage","text":""},{"location":"examples/#processing-a-single-invoice","title":"Processing a Single Invoice","text":"<pre><code>from src._processor import Processor\n\n# Initialize\nwith open('api_key.txt', 'r') as f:\n    api_key = f.read().strip()\nprocessor = Processor(api_key)\n\n# Process invoice\nresult = processor.extract_json_from_image('invoices/sample.jpg')\n\n# Check results\nif isinstance(result, dict):\n    print(f\"Invoice Number: {result.get('invoice_number')}\")\n    print(f\"Total Amount: {result.get('total')}\")\nelse:\n    print(\"Failed to process invoice\")\n</code></pre>"},{"location":"examples/#processing-multiple-invoices","title":"Processing Multiple Invoices","text":"<pre><code>import os\nfrom src._processor import Processor\n\ndef process_invoice_batch(directory):\n    # Initialize processor\n    with open('api_key.txt', 'r') as f:\n        api_key = f.read().strip()\n    processor = Processor(api_key)\n\n    results = []\n    errors = []\n\n    # Process each invoice\n    for filename in os.listdir(directory):\n        if filename.endswith(('.jpg', '.png')):\n            try:\n                filepath = os.path.join(directory, filename)\n                result = processor.extract_json_from_image(filepath)\n                if isinstance(result, dict):\n                    results.append(result)\n                else:\n                    errors.append(f\"Failed to process {filename}\")\n            except Exception as e:\n                errors.append(f\"Error processing {filename}: {str(e)}\")\n\n    return results, errors\n\n# Usage\nresults, errors = process_invoice_batch('invoices')\nprint(f\"Processed {len(results)} invoices successfully\")\nprint(f\"Found {len(errors)} errors\")\n</code></pre>"},{"location":"examples/#validation-examples","title":"Validation Examples","text":""},{"location":"examples/#basic-validation","title":"Basic Validation","text":"<pre><code>from src.utils.invoice_checker import validate_invoice_data\n\ninvoice_data = {\n    \"invoice_number\": \"INV-001\",\n    \"invoice_date\": \"2024-06-01\",\n    \"supplier\": {\"name\": \"Supplier Inc.\"},\n    \"client\": {\"name\": \"Client LLC\"},\n    \"items\": [\n        {\n            \"description\": \"Item 1\",\n            \"quantity\": 2,\n            \"unit_price\": 10,\n            \"total_price\": 20\n        }\n    ],\n    \"subtotal\": 20,\n    \"total\": 20\n}\n\nresult = validate_invoice_data(invoice_data)\nif result[\"is_valid\"]:\n    print(\"Invoice data is valid\")\nelse:\n    print(\"Validation errors:\")\n    for error in result[\"errors\"]:\n        print(f\"- {error}\")\n</code></pre>"},{"location":"examples/#error-handling-examples","title":"Error Handling Examples","text":"<ol> <li> <p>Missing Required Field <pre><code>invalid_invoice = {\n    # Missing invoice_number\n    \"invoice_date\": \"2024-06-01\",\n    \"total\": 100\n}\n</code></pre></p> </li> <li> <p>Invalid Data Type <pre><code>invalid_invoice = {\n    \"invoice_number\": \"INV-001\",\n    \"total\": \"100\",  # Should be numeric\n}\n</code></pre></p> </li> <li> <p>Mathematical Inconsistency <pre><code>invalid_invoice = {\n    \"invoice_number\": \"INV-001\",\n    \"items\": [\n        {\"quantity\": 2, \"unit_price\": 10, \"total_price\": 25}  # 2 * 10 \u2260 25\n    ],\n    \"total\": 25\n}\n</code></pre></p> </li> </ol>"},{"location":"examples/#best-practices","title":"Best Practices","text":""},{"location":"examples/#image-preparation","title":"Image Preparation","text":"<pre><code>from PIL import Image\n\ndef prepare_image(image_path):\n    \"\"\"Optimize image for processing\"\"\"\n    with Image.open(image_path) as img:\n        # Convert to RGB if needed\n        if img.mode != 'RGB':\n            img = img.convert('RGB')\n\n        # Resize if too large\n        max_size = 2000\n        if max(img.size) &gt; max_size:\n            ratio = max_size / max(img.size)\n            new_size = tuple(int(dim * ratio) for dim in img.size)\n            img = img.resize(new_size, Image.LANCZOS)\n\n        # Save optimized image\n        output_path = f\"optimized_{os.path.basename(image_path)}\"\n        img.save(output_path, quality=85, optimize=True)\n        return output_path\n\n# Usage\noptimized_path = prepare_image('invoices/large_invoice.jpg')\nresult = processor.extract_json_from_image(optimized_path)\n</code></pre>"},{"location":"examples/#error-logging","title":"Error Logging","text":"<pre><code>import logging\n\nlogging.basicConfig(\n    filename='invoice_processing.log',\n    level=logging.INFO,\n    format='%(asctime)s - %(levelname)s - %(message)s'\n)\n\ndef process_with_logging(image_path):\n    try:\n        result = processor.extract_json_from_image(image_path)\n        if isinstance(result, dict):\n            logging.info(f\"Successfully processed {image_path}\")\n            validation = validate_invoice_data(result)\n            if not validation[\"is_valid\"]:\n                logging.warning(f\"Validation errors in {image_path}: {validation['errors']}\")\n        else:\n            logging.error(f\"Failed to process {image_path}\")\n    except Exception as e:\n        logging.error(f\"Error processing {image_path}: {str(e)}\")\n        raise\n</code></pre>"},{"location":"examples/#common-patterns","title":"Common Patterns","text":""},{"location":"examples/#batch-processing-with-progress","title":"Batch Processing with Progress","text":"<pre><code>from tqdm import tqdm\nimport concurrent.futures\n\ndef process_batch_with_progress(directory, max_workers=4):\n    with concurrent.futures.ThreadPoolExecutor(max_workers=max_workers) as executor:\n        files = [f for f in os.listdir(directory) if f.endswith(('.jpg', '.png'))]\n        futures = {executor.submit(processor.extract_json_from_image, \n                                 os.path.join(directory, f)): f \n                  for f in files}\n\n        results = {}\n        for future in tqdm(concurrent.futures.as_completed(futures), \n                          total=len(files),\n                          desc=\"Processing invoices\"):\n            filename = futures[future]\n            try:\n                results[filename] = future.result()\n            except Exception as e:\n                results[filename] = f\"Error: {str(e)}\"\n\n    return results\n</code></pre>"},{"location":"faq/","title":"Frequently Asked Questions (FAQ)","text":""},{"location":"faq/#general-questions","title":"General Questions","text":""},{"location":"faq/#q-what-types-of-invoices-can-be-processed","title":"Q: What types of invoices can be processed?","text":"<p>A: The system can process most standard invoice formats in JPG or PNG format. The invoices should be clear, well-lit, and contain standard invoice information like numbers, dates, amounts, and line items.</p>"},{"location":"faq/#q-what-is-the-recommended-image-resolution","title":"Q: What is the recommended image resolution?","text":"<p>A: We recommend images with at least 300 DPI resolution. Higher resolution generally provides better results, but files should be optimized if they exceed 5MB.</p>"},{"location":"faq/#q-how-accurate-is-the-extraction","title":"Q: How accurate is the extraction?","text":"<p>A: The accuracy depends on image quality and invoice format. With clear, well-formatted invoices, the accuracy is typically very high. All extracted data goes through rigorous validation to ensure consistency.</p>"},{"location":"faq/#technical-questions","title":"Technical Questions","text":""},{"location":"faq/#q-why-am-i-getting-authentication-errors","title":"Q: Why am I getting authentication errors?","text":"<p>A: Common reasons include: - Invalid API key - Expired API key - Whitespace in the API key file - Network connectivity issues</p>"},{"location":"faq/#q-how-can-i-process-multiple-invoices-efficiently","title":"Q: How can I process multiple invoices efficiently?","text":"<p>A: You can use batch processing with parallel execution: <pre><code>import concurrent.futures\n\ndef process_batch(invoice_files, max_workers=4):\n    with concurrent.futures.ThreadPoolExecutor(max_workers=max_workers) as executor:\n        futures = {executor.submit(process_single_invoice, f): f for f in invoice_files}\n        return {f: future.result() for future, f in futures.items()}\n</code></pre></p>"},{"location":"faq/#q-what-should-i-do-if-validation-fails","title":"Q: What should I do if validation fails?","text":"<p>A: Check the validation errors returned in the result: 1. Verify required fields are present 2. Check numeric fields contain valid numbers 3. Ensure calculations are correct 4. Validate date formats 5. Check for any business rule violations</p>"},{"location":"faq/#error-handling","title":"Error Handling","text":""},{"location":"faq/#q-how-do-i-handle-network-timeouts","title":"Q: How do I handle network timeouts?","text":"<p>A: Implement retry logic: <pre><code>from tenacity import retry, stop_after_attempt, wait_exponential\n\n@retry(stop=stop_after_attempt(3), wait=wait_exponential(multiplier=1, min=4, max=10))\ndef process_with_retry(image_path):\n    return processor.extract_json_from_image(image_path)\n</code></pre></p>"},{"location":"faq/#q-what-if-the-extracted-data-is-incomplete","title":"Q: What if the extracted data is incomplete?","text":"<p>A: Check the following: 1. Image quality 2. Document orientation 3. Required fields visibility 4. OCR confidence scores 5. Validation error messages</p>"},{"location":"faq/#performance","title":"Performance","text":""},{"location":"faq/#q-how-can-i-optimize-processing-speed","title":"Q: How can I optimize processing speed?","text":"<p>A: Several strategies: 1. Batch processing 2. Image optimization 3. Caching results 4. Parallel processing 5. Regular API key rotation</p>"},{"location":"faq/#q-whats-the-recommended-batch-size","title":"Q: What's the recommended batch size?","text":"<p>A: For optimal performance: - Standard processing: 10-20 invoices - Parallel processing: 4-8 concurrent tasks - Maximum batch size: 50 invoices</p>"},{"location":"faq/#integration","title":"Integration","text":""},{"location":"faq/#q-can-i-integrate-this-with-other-systems","title":"Q: Can I integrate this with other systems?","text":"<p>A: Yes, the system can be integrated with: - ERP systems - Accounting software - Document management systems - Custom workflows</p>"},{"location":"faq/#q-how-can-i-extend-the-validation-rules","title":"Q: How can I extend the validation rules?","text":"<p>A: You can add custom validation rules: <pre><code>def custom_validator(invoice_data):\n    custom_errors = []\n    # Add your custom validation logic\n    return custom_errors\n\ndef validate_with_custom_rules(invoice_data):\n    # Standard validation\n    result = validate_invoice_data(invoice_data)\n\n    # Add custom validation\n    custom_errors = custom_validator(invoice_data)\n    if custom_errors:\n        result[\"errors\"].extend(custom_errors)\n        result[\"total_errors\"] += len(custom_errors)\n        result[\"is_valid\"] = False\n\n    return result\n</code></pre></p>"},{"location":"faq/#maintenance","title":"Maintenance","text":""},{"location":"faq/#q-how-often-should-i-update-the-system","title":"Q: How often should I update the system?","text":"<p>A: Regular maintenance includes: - Weekly API key rotation - Monthly performance review - Regular dependency updates - Periodic model updates</p>"},{"location":"faq/#q-how-can-i-monitor-system-performance","title":"Q: How can I monitor system performance?","text":"<p>A: Implement logging and monitoring: <pre><code>import logging\nfrom datetime import datetime\n\ndef monitor_processing(image_path):\n    start_time = datetime.now()\n    try:\n        result = processor.extract_json_from_image(image_path)\n        processing_time = datetime.now() - start_time\n        logging.info(f\"Processed {image_path} in {processing_time.total_seconds():.2f}s\")\n        return result\n    except Exception as e:\n        logging.error(f\"Failed to process {image_path}: {str(e)}\")\n        raise\n</code></pre></p>"},{"location":"faq/#support","title":"Support","text":""},{"location":"faq/#q-where-can-i-get-help","title":"Q: Where can I get help?","text":"<p>A: Support options include: 1. Documentation in the <code>docs</code> folder 2. GitHub issues 3. Community forums 4. Direct support channels</p>"},{"location":"faq/#q-how-do-i-report-bugs","title":"Q: How do I report bugs?","text":"<p>A: When reporting issues: 1. Provide steps to reproduce 2. Include error messages 3. Share sample invoice (redacted) 4. Describe expected behavior 5. List environment details</p>"},{"location":"getting_started/","title":"Getting Started with Invoice Extractor","text":"<p>This guide will help you get up and running with the Invoice Extractor project.</p>"},{"location":"getting_started/#quick-start","title":"Quick Start","text":"<ol> <li>System Requirements</li> <li>Python 3.7 or higher</li> <li>Operating System: Windows, macOS, or Linux</li> <li>Sufficient disk space for dependencies</li> <li> <p>Internet connection for API access</p> </li> <li> <p>Installation Steps</p> </li> </ol> <pre><code># Clone the repository\ngit clone https://github.com/ouassim-behlil/InvoiceDataExtractor.git\ncd invoiceExtractor\n\n# Install dependencies\npip install -r requirements.txt\n\n# Set up API key\necho \"your-api-key-here\" &gt; api_key.txt\n</code></pre> <ol> <li>First Run</li> </ol> <pre><code>from src._processor import Processor\n\n# Initialize with API key\nwith open('api_key.txt', 'r') as f:\n    api_key = f.read().strip()\nprocessor = Processor(api_key)\n\n# Process an invoice\nresult = processor.extract_json_from_image('invoices/your_invoice.jpg')\n</code></pre>"},{"location":"getting_started/#directory-structure","title":"Directory Structure","text":"<pre><code>invoiceExtractor/\n\u251c\u2500\u2500 src/               # Source code\n\u251c\u2500\u2500 tests/             # Test files\n\u251c\u2500\u2500 invoices/          # Place invoice images here\n\u251c\u2500\u2500 docs/              # Documentation\n\u2514\u2500\u2500 requirements.txt   # Dependencies\n</code></pre>"},{"location":"getting_started/#next-steps","title":"Next Steps","text":"<ol> <li>Read the API Documentation for detailed function references</li> <li>Check out the Examples for common use cases</li> <li>Review the Validation Guide for data validation details</li> <li>See Troubleshooting for common issues</li> </ol>"},{"location":"getting_started/#support","title":"Support","text":"<p>For issues and questions: 1. Check the FAQ 2. Open an issue on GitHub 3. Contact the maintainers</p>"},{"location":"troubleshooting/","title":"Troubleshooting Guide","text":"<p>This guide covers common issues and their solutions when using the Invoice Extractor.</p>"},{"location":"troubleshooting/#common-issues","title":"Common Issues","text":""},{"location":"troubleshooting/#1-api-authentication-errors","title":"1. API Authentication Errors","text":"<p>Symptoms: - \"Invalid API key\" error - Authentication failures - Connection errors to Google Gemini API</p> <p>Solutions: 1. Verify your API key is correctly stored in <code>api_key.txt</code> 2. Ensure no whitespace or newlines in the API key 3. Check if your API key has expired 4. Verify your internet connection</p>"},{"location":"troubleshooting/#2-image-processing-failures","title":"2. Image Processing Failures","text":"<p>Symptoms: - No JSON output - Invalid or incomplete extraction results - OCR errors</p> <p>Solutions:</p> <ol> <li>Image Quality Issues</li> <li>Ensure image is clear and well-lit</li> <li>Check image resolution (recommended: at least 300 DPI)</li> <li>Verify file format (supported: JPG, PNG)</li> <li> <p>Remove any watermarks or overlays</p> </li> <li> <p>File Format Problems <pre><code>from PIL import Image\n\ndef check_image(image_path):\n    try:\n        with Image.open(image_path) as img:\n            print(f\"Format: {img.format}\")\n            print(f\"Size: {img.size}\")\n            print(f\"Mode: {img.mode}\")\n    except Exception as e:\n        print(f\"Error: {str(e)}\")\n</code></pre></p> </li> <li> <p>Optimization Tips</p> </li> <li>Convert images to RGB mode</li> <li>Resize large images</li> <li>Improve contrast if needed</li> </ol>"},{"location":"troubleshooting/#3-validation-errors","title":"3. Validation Errors","text":"<p>Symptoms: - <code>is_valid: false</code> in validation results - Mathematical inconsistencies - Missing required fields</p> <p>Solutions:</p> <ol> <li>Check Required Fields</li> <li>Invoice number</li> <li>Invoice date</li> <li>Total amount</li> <li>Supplier name</li> <li> <p>Client name</p> </li> <li> <p>Mathematical Validation</p> </li> <li>Verify line item calculations</li> <li>Check subtotal computation</li> <li> <p>Validate tax and discount calculations</p> </li> <li> <p>Data Type Issues</p> </li> <li>Ensure numeric fields contain numbers</li> <li>Verify date format (YYYY-MM-DD)</li> <li>Check quantity fields are integers</li> </ol>"},{"location":"troubleshooting/#4-performance-issues","title":"4. Performance Issues","text":"<p>Symptoms: - Slow processing times - Memory errors - Timeouts</p> <p>Solutions:</p> <ol> <li> <p>Optimize Batch Processing <pre><code>def optimize_image_batch(directory):\n    for filename in os.listdir(directory):\n        if filename.endswith(('.jpg', '.png')):\n            filepath = os.path.join(directory, filename)\n            # Check file size\n            if os.path.getsize(filepath) &gt; 5_000_000:  # 5MB\n                optimize_image(filepath)\n</code></pre></p> </li> <li> <p>Memory Management</p> </li> <li>Process large batches in chunks</li> <li>Implement proper cleanup</li> <li> <p>Monitor memory usage</p> </li> <li> <p>Connection Handling</p> </li> <li>Implement retry logic</li> <li>Add timeouts</li> <li>Handle network errors</li> </ol>"},{"location":"troubleshooting/#debugging-tips","title":"Debugging Tips","text":""},{"location":"troubleshooting/#1-enable-detailed-logging","title":"1. Enable Detailed Logging","text":"<pre><code>import logging\n\nlogging.basicConfig(\n    level=logging.DEBUG,\n    format='%(asctime)s - %(levelname)s - %(message)s',\n    handlers=[\n        logging.FileHandler('debug.log'),\n        logging.StreamHandler()\n    ]\n)\n</code></pre>"},{"location":"troubleshooting/#2-validation-debugging","title":"2. Validation Debugging","text":"<pre><code>def debug_validation(invoice_data):\n    validation = validate_invoice_data(invoice_data)\n    if not validation[\"is_valid\"]:\n        print(\"=== Validation Debug ===\")\n        print(\"Required Fields:\")\n        for field in [\"invoice_number\", \"invoice_date\", \"total\"]:\n            print(f\"{field}: {invoice_data.get(field)}\")\n\n        print(\"\\nCalculations:\")\n        if \"items\" in invoice_data:\n            total = sum(item.get(\"total_price\", 0) for item in invoice_data[\"items\"])\n            print(f\"Calculated total: {total}\")\n            print(f\"Given total: {invoice_data.get('total')}\")\n</code></pre>"},{"location":"troubleshooting/#3-image-processing-debug","title":"3. Image Processing Debug","text":"<pre><code>def debug_image_processing(image_path):\n    try:\n        # Check image properties\n        check_image(image_path)\n\n        # Try processing with debug info\n        result = processor.extract_json_from_image(image_path)\n\n        # Analyze result\n        if isinstance(result, dict):\n            print(\"Extraction successful\")\n            print(f\"Fields extracted: {list(result.keys())}\")\n            print(f\"Total fields: {len(result)}\")\n        else:\n            print(\"Extraction failed\")\n            print(f\"Result type: {type(result)}\")\n\n    except Exception as e:\n        print(f\"Processing error: {str(e)}\")\n</code></pre>"},{"location":"troubleshooting/#when-to-contact-support","title":"When to Contact Support","text":"<p>Contact support if: 1. You've tried all relevant troubleshooting steps 2. The error is consistent and reproducible 3. You suspect it's a bug in the library</p> <p>Provide the following information: - Error messages and stack traces - Sample invoice (with sensitive information removed) - Steps to reproduce - Environment details (Python version, OS, etc.)</p>"},{"location":"validation/","title":"Validation Guide","text":"<p>This guide explains the validation system used in the Invoice Extractor project.</p>"},{"location":"validation/#overview","title":"Overview","text":"<p>The validation system ensures: 1. Data integrity 2. Mathematical consistency 3. Required field presence 4. Proper data types 5. Business rule compliance</p>"},{"location":"validation/#validation-rules","title":"Validation Rules","text":""},{"location":"validation/#required-fields","title":"Required Fields","text":"<pre><code>required_fields = [\n    \"invoice_number\",\n    \"invoice_date\",\n    \"total\"\n]\n</code></pre> <p>These fields must be present and non-empty in every invoice.</p>"},{"location":"validation/#data-types","title":"Data Types","text":"Field Required Type Notes invoice_number string Non-empty invoice_date string YYYY-MM-DD format total number Positive value quantity integer Positive value unit_price number Positive value subtotal number Positive value discount_percentage number 0-100 range"},{"location":"validation/#mathematical-validations","title":"Mathematical Validations","text":"<ol> <li> <p>Line Item Calculations <pre><code>item_total = quantity * unit_price\n</code></pre></p> </li> <li> <p>Subtotal Calculation <pre><code>subtotal = sum(item[\"total_price\"] for item in items)\n</code></pre></p> </li> <li> <p>Total Calculation <pre><code>total = subtotal\nif discount:\n    total -= discount\nif tax:\n    total += tax\nif shipping_cost:\n    total += shipping_cost\nif rounding_adjustment:\n    total += rounding_adjustment\n</code></pre></p> </li> </ol>"},{"location":"validation/#business-rules","title":"Business Rules","text":"<ol> <li>Quantity Rules</li> <li>Must be positive integer</li> <li> <p>No fractional quantities allowed</p> </li> <li> <p>Price Rules</p> </li> <li>All prices must be positive</li> <li> <p>Minimum unit price: 0.001</p> </li> <li> <p>Discount Rules</p> </li> <li>Percentage must be between 0-100</li> <li> <p>Amount must not exceed subtotal</p> </li> <li> <p>Client/Supplier Rules</p> </li> <li>Must have at least a name</li> <li>Email must be valid format if present</li> </ol>"},{"location":"validation/#validation-process","title":"Validation Process","text":"<p>The validation occurs in multiple stages:</p> <ol> <li> <p>Field Presence Check <pre><code>def check_required_fields(invoice_data):\n    missing = []\n    for field in required_fields:\n        if field not in invoice_data or invoice_data[field] is None:\n            missing.append(field)\n    return missing\n</code></pre></p> </li> <li> <p>Type Validation <pre><code>def validate_types(invoice_data):\n    errors = []\n    if not isinstance(invoice_data.get(\"total\"), (int, float)):\n        errors.append(\"Total must be numeric\")\n    # ... more type checks ...\n    return errors\n</code></pre></p> </li> <li> <p>Mathematical Validation <pre><code>def validate_calculations(invoice_data):\n    errors = []\n    # Check line items\n    for item in invoice_data.get(\"items\", []):\n        expected = item[\"quantity\"] * item[\"unit_price\"]\n        if item[\"total_price\"] != expected:\n            errors.append(f\"Line item total mismatch\")\n    # ... more calculation checks ...\n    return errors\n</code></pre></p> </li> </ol>"},{"location":"validation/#error-messages","title":"Error Messages","text":"<p>The validation system provides detailed error messages:</p> <pre><code>{\n    \"is_valid\": false,\n    \"errors\": [\n        \"Missing required field: invoice_number\",\n        \"Field 'total' must be numeric\",\n        \"Item 1: quantity must be an integer\",\n        \"Subtotal mismatch: sum of line items (95.00) \u2260 subtotal (90.00)\"\n    ],\n    \"total_errors\": 4\n}\n</code></pre>"},{"location":"validation/#best-practices","title":"Best Practices","text":""},{"location":"validation/#1-pre-validation-checks","title":"1. Pre-validation Checks","text":"<pre><code>def pre_validate(data):\n    if not isinstance(data, dict):\n        return False, [\"Input must be a dictionary\"]\n    if \"items\" in data and not isinstance(data[\"items\"], list):\n        return False, [\"Items must be an array\"]\n    return True, []\n</code></pre>"},{"location":"validation/#2-custom-validation-rules","title":"2. Custom Validation Rules","text":"<pre><code>def add_custom_validation(invoice_data, rules):\n    errors = []\n    for rule in rules:\n        result = rule(invoice_data)\n        if not result[\"valid\"]:\n            errors.append(result[\"error\"])\n    return errors\n</code></pre>"},{"location":"validation/#3-validation-helpers","title":"3. Validation Helpers","text":"<pre><code>def validate_email(email):\n    import re\n    pattern = r'^[\\w\\.-]+@[\\w\\.-]+\\.\\w+$'\n    return re.match(pattern, email) is not None\n\ndef validate_date_format(date_str):\n    from datetime import datetime\n    try:\n        datetime.strptime(date_str, '%Y-%m-%d')\n        return True\n    except ValueError:\n        return False\n</code></pre>"},{"location":"validation/#examples","title":"Examples","text":""},{"location":"validation/#basic-validation","title":"Basic Validation","text":"<pre><code>from src.utils.invoice_checker import validate_invoice_data\n\n# Valid invoice\nvalid_invoice = {\n    \"invoice_number\": \"INV-001\",\n    \"invoice_date\": \"2024-06-01\",\n    \"supplier\": {\"name\": \"Supplier Inc.\"},\n    \"client\": {\"name\": \"Client LLC\"},\n    \"items\": [\n        {\n            \"description\": \"Item 1\",\n            \"quantity\": 2,\n            \"unit_price\": 10,\n            \"total_price\": 20\n        }\n    ],\n    \"subtotal\": 20,\n    \"total\": 20\n}\n\nresult = validate_invoice_data(valid_invoice)\nprint(f\"Valid invoice check: {result['is_valid']}\")\n</code></pre>"},{"location":"validation/#common-validation-errors","title":"Common Validation Errors","text":"<pre><code># Missing required field\ninvalid_invoice = {\n    \"invoice_date\": \"2024-06-01\",\n    # Missing invoice_number\n    \"total\": 100\n}\n\n# Invalid data type\ninvalid_invoice = {\n    \"invoice_number\": \"INV-001\",\n    \"total\": \"100\"  # Should be numeric\n}\n\n# Mathematical inconsistency\ninvalid_invoice = {\n    \"invoice_number\": \"INV-001\",\n    \"items\": [\n        {\"quantity\": 2, \"unit_price\": 10, \"total_price\": 25}  # 2 * 10 \u2260 25\n    ],\n    \"total\": 25\n}\n</code></pre>"},{"location":"validation/#handling-validation-results","title":"Handling Validation Results","text":"<pre><code>def process_validation_result(validation_result):\n    if validation_result[\"is_valid\"]:\n        return True\n\n    # Group errors by type\n    error_types = {\n        \"missing\": [],\n        \"type\": [],\n        \"calculation\": [],\n        \"other\": []\n    }\n\n    for error in validation_result[\"errors\"]:\n        if \"Missing required field\" in error:\n            error_types[\"missing\"].append(error)\n        elif \"must be\" in error:\n            error_types[\"type\"].append(error)\n        elif \"mismatch\" in error:\n            error_types[\"calculation\"].append(error)\n        else:\n            error_types[\"other\"].append(error)\n\n    # Handle each error type appropriately\n    if error_types[\"missing\"]:\n        print(\"Missing Fields:\", error_types[\"missing\"])\n    if error_types[\"type\"]:\n        print(\"Type Errors:\", error_types[\"type\"])\n    if error_types[\"calculation\"]:\n        print(\"Calculation Errors:\", error_types[\"calculation\"])\n    if error_types[\"other\"]:\n        print(\"Other Errors:\", error_types[\"other\"])\n\n    return False\n</code></pre>"}]}